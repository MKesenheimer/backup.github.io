<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Physik, Elektronik und mehr…</title>
    <link href="https://mkesenheimer.github.io/feed.xml" rel="self" />
    <link href="https://mkesenheimer.github.io" />
    <updated>2024-09-13T15:56:45+02:00</updated>
    <author>
        <name>Matthias Kesenheimer</name>
    </author>
    <id>https://mkesenheimer.github.io</id>

    <entry>
        <title>Audiometry</title>
        <author>
            <name>Matthias Kesenheimer</name>
        </author>
        <link href="https://mkesenheimer.github.io/audiometry.html"/>
        <id>https://mkesenheimer.github.io/audiometry.html</id>
        <media:content url="https://mkesenheimer.github.io/media/posts/33/example.png" medium="image" />

        <updated>2020-12-29T21:34:28+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://mkesenheimer.github.io/media/posts/33/example.png" alt="" />
                    <p><!-- wp:paragraph --></p>
<p>A while ago I had to take a hearing test at the doctor. The result of my left ear was unfortunately sobering, yet I found the measurement itself very interesting. To be able to continue to control my hearing ability, I wrote a program to measure the hearing threshold at different frequencies.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:more --></p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://mkesenheimer.github.io/media/posts/33/example.png" class="type:primaryImage" alt="" /></p>
                <p><!-- wp:paragraph --></p>
<p>A while ago I had to take a hearing test at the doctor. The result of my left ear was unfortunately sobering, yet I found the measurement itself very interesting. To be able to continue to control my hearing ability, I wrote a program to measure the hearing threshold at different frequencies.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:more --></p>

<p>The way the program works is actually very simple. Tones with different frequencies are played in random order. The tones get louder and louder until the user presses a key. Meanwhile, the measuring point of the respective frequency moves downwards in the graph. Qualitatively, a louder tone corresponds to a measuring point further down in the graph. If a key is pressed by the user, the current position of the measuring point is saved. All tones, each for the left and right ear, are played until the graph is complete.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The following picture shows an example of a measurement (not an actual measurement). One can see the red line for the left ear and the blue line for the right ear. In this example, the hearing ability of the left ear is severely limited for low frequencies.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":1302,"sizeSlug":"large","linkDestination":"media"} --></p>
<figure class="wp-block-image size-large"><a href="https://deralchemist.wordpress.com/wp-content/uploads/2020/12/example.png"><figure class="wp-image-1302"><img loading="lazy"  src="https://mkesenheimer.github.io/media/posts/33/example.png" alt="" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://mkesenheimer.github.io/media/posts/33/responsive/example-xs.png 640w ,https://mkesenheimer.github.io/media/posts/33/responsive/example-sm.png 768w ,https://mkesenheimer.github.io/media/posts/33/responsive/example-md.png 1024w ,https://mkesenheimer.github.io/media/posts/33/responsive/example-lg.png 1366w ,https://mkesenheimer.github.io/media/posts/33/responsive/example-xl.png 1600w ,https://mkesenheimer.github.io/media/posts/33/responsive/example-2xl.png 1920w"></figure></a></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p>Of course, this program should not replace a real hearing test at the doctor's office. It is also extremely difficult to calibrate the y-axis, which is why it has no scale in the current program. Nevertheless, the program can be used to qualitatively control the hearing ability over time. However, the boundary conditions of the measurement must then always be the same.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Since the y-axis does not have a scale, no absolute statements can be made about the hearing ability at a specific frequency. Nevertheless, comparisons can be made between the left and right ear.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The program can be downloaded from <a href="https://github.com/MKesenheimer/Audiometry" target="_blank" rel="noreferrer noopener">https://github.com/MKesenheimer/Audiometry</a>. For the program to compile, the <a href="https://www.libsdl.org" target="_blank" rel="noreferrer noopener">SDL library</a> must be installed.</p>
<p><!-- /wp:paragraph --></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Arduino Precision Scale</title>
        <author>
            <name>Matthias Kesenheimer</name>
        </author>
        <link href="https://mkesenheimer.github.io/arduino-precision-scale.html"/>
        <id>https://mkesenheimer.github.io/arduino-precision-scale.html</id>
        <media:content url="https://mkesenheimer.github.io/media/posts/32/precision_scale1.jpg" medium="image" />

        <updated>2020-09-06T13:44:00+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://mkesenheimer.github.io/media/posts/32/precision_scale1.jpg" alt="" />
                    <p><!-- wp:paragraph --></p>
<p>Because my brother bought a coffee machine and he wanted to brew the perfect espresso, he had to measure the amount of coffee powder relatively accurately. A cost-effective alternative to expensive scales was to build a precision scale from an Arduino, a load cell and a 3D-printed housing.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://mkesenheimer.github.io/media/posts/32/precision_scale1.jpg" class="type:primaryImage" alt="" /></p>
                <p><!-- wp:paragraph --></p>
<p>Because my brother bought a coffee machine and he wanted to brew the perfect espresso, he had to measure the amount of coffee powder relatively accurately. A cost-effective alternative to expensive scales was to build a precision scale from an Arduino, a load cell and a 3D-printed housing.</p>
<!-- /wp:more -->
<p><!-- wp:paragraph --></p>
<p>There is nothing earth-shattering about building your own Arduino precision scale. However, the project was a lot of fun when combined with 3D printing and programming. And, in all modesty, the product looks really impressive. The Arduino precision scale is not only beautiful, but also very precise. Weights can be measured accurately to one tenth of a gram.<span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> </span></p>
<figure class="post__image"><img loading="lazy"  src="https://mkesenheimer.github.io/media/posts/32/precision_scale2-2.jpg" alt="" width="1276" height="956" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://mkesenheimer.github.io/media/posts/32/responsive/precision_scale2-2-xs.jpg 640w ,https://mkesenheimer.github.io/media/posts/32/responsive/precision_scale2-2-sm.jpg 768w ,https://mkesenheimer.github.io/media/posts/32/responsive/precision_scale2-2-md.jpg 1024w ,https://mkesenheimer.github.io/media/posts/32/responsive/precision_scale2-2-lg.jpg 1366w ,https://mkesenheimer.github.io/media/posts/32/responsive/precision_scale2-2-xl.jpg 1600w ,https://mkesenheimer.github.io/media/posts/32/responsive/precision_scale2-2-2xl.jpg 1920w"></figure>
<figure class="post__image"><img loading="lazy"  src="https://mkesenheimer.github.io/media/posts/32/precision_scale1-2.jpg" alt="" width="1280" height="960" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://mkesenheimer.github.io/media/posts/32/responsive/precision_scale1-2-xs.jpg 640w ,https://mkesenheimer.github.io/media/posts/32/responsive/precision_scale1-2-sm.jpg 768w ,https://mkesenheimer.github.io/media/posts/32/responsive/precision_scale1-2-md.jpg 1024w ,https://mkesenheimer.github.io/media/posts/32/responsive/precision_scale1-2-lg.jpg 1366w ,https://mkesenheimer.github.io/media/posts/32/responsive/precision_scale1-2-xl.jpg 1600w ,https://mkesenheimer.github.io/media/posts/32/responsive/precision_scale1-2-2xl.jpg 1920w"></figure>
<p>All documents for recreation can be found on my <a href="https://github.com/MKesenheimer/PrecisionScale">Github</a> page. Here the program code, the wiring diagram and the 3D files were uploaded. Additionally, the 3D files are also available on <a href="https://www.thingiverse.com/thing:4589590">Thingiverse</a>.</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="3">
<figure class="gallery__item"><a href="https://mkesenheimer.github.io/media/posts/32/gallery/construction1.png" data-size="1065x625"><img loading="lazy" src="https://mkesenheimer.github.io/media/posts/32/gallery/construction1-thumbnail.png" alt="" width="720" height="423"></a></figure>
<figure class="gallery__item"><a href="https://mkesenheimer.github.io/media/posts/32/gallery/construction2.png" data-size="950x606"><img loading="lazy" src="https://mkesenheimer.github.io/media/posts/32/gallery/construction2-thumbnail.png" alt="" width="720" height="459"></a></figure>
<figure class="gallery__item"><a href="https://mkesenheimer.github.io/media/posts/32/gallery/construction3.png" data-size="812x317"><img loading="lazy" src="https://mkesenheimer.github.io/media/posts/32/gallery/construction3-thumbnail.png" alt="" width="720" height="281"></a></figure>
<figure class="gallery__item"><a href="https://mkesenheimer.github.io/media/posts/32/gallery/precisionscalewiring_bb.png" data-size="1791x984"><img loading="lazy" src="https://mkesenheimer.github.io/media/posts/32/gallery/precisionscalewiring_bb-thumbnail.png" alt="" width="720" height="396"></a></figure>
</div></div>
<p><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">To rebuild the scale, the following materials are required:</span></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
<li>1 Arduino Nano (328p)</li>
<li>1 4-digit LED display</li>
<li>1 100g load cell</li>
<li>HX711 board</li>
<li>3D printer and filament</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>Before using the scale, it must be calibrated. This can be done with the enclosed program <a href="https://github.com/MKesenheimer/PrecisionScale/blob/master/PrecisionScale_Calibration/PrecisionScale_Calibration.ino">PrecisionScale_Calibration.ino</a>. Afterwards the use of the scale should be self-explanatory.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Note: This project is Work-in-Progress. The housing of the scale is not yet perfect and may have to be modified after printing to fit all components.</p>
<p><!-- /wp:paragraph --></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>TempestSDR - Monitore ausspionieren</title>
        <author>
            <name>Matthias Kesenheimer</name>
        </author>
        <link href="https://mkesenheimer.github.io/tempestsdr-monitore-ausspionieren.html"/>
        <id>https://mkesenheimer.github.io/tempestsdr-monitore-ausspionieren.html</id>
        <media:content url="https://mkesenheimer.github.io/media/posts/31/tempesttemplate.png" medium="image" />

        <updated>2020-09-04T21:35:19+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://mkesenheimer.github.io/media/posts/31/tempesttemplate.png" alt="" />
                    <p><!-- wp:paragraph --></p>
<p>Wie vermutlich jeder weiß, senden Elektrogeräte beim Betrieb hochfrequente, elektromagnetische Strahlung ab (landläufig auch als "Elektrosmog" bekannt). Insbesondere Bildschirme und die Abstrahlung ihrer elektromagnetischen Störstrahlung sind hier sehr interessant, da man aus der Modulation der abgestrahlten Strahlung unter Umständen Informationen darüber gewinnen kann, was auf dem Bildschirm gerade angezeigt wird.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://mkesenheimer.github.io/media/posts/31/tempesttemplate.png" class="type:primaryImage" alt="" /></p>
                <p><!-- wp:paragraph --></p>
<p>Wie vermutlich jeder weiß, senden Elektrogeräte beim Betrieb hochfrequente, elektromagnetische Strahlung ab (landläufig auch als "Elektrosmog" bekannt). Insbesondere Bildschirme und die Abstrahlung ihrer elektromagnetischen Störstrahlung sind hier sehr interessant, da man aus der Modulation der abgestrahlten Strahlung unter Umständen Informationen darüber gewinnen kann, was auf dem Bildschirm gerade angezeigt wird.</p>
<!-- /wp:more -->
<p><!-- wp:paragraph --></p>
<p>Dieser Angriff ist als TempestSDR bekannt. Tempest war in Zeiten des kalten Kriegs der Deckname von elektromagnetischen Abhörverfahren. Eine gute Übersicht wurde außerdem auf <a href="https://www.rtl-sdr.com/tempestsdr-a-sdr-tool-for-eavesdropping-on-computer-screens-via-unintentionally-radiated-rf/">rtl-sdr.com</a> zusammengestellt. Hier wird erklärt, was alles benötigt wird und wie man die Software installiert.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2>Setup</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Es wird folgende Soft- und Hardware benötigt:</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul id="block-fe0214d7-bd43-4382-be7e-739731f42624">
<li>SDR-Device, Software-Defined-Radio zum Beispiel: <a href="https://www.rtl-sdr.com/buy-rtl-sdr-dvb-t-dongles/">RTL-SDR</a>, Airspy, SDRplay oder HackRF</li>
<li><a href="https://www.gnuradio.org/">gnuRadio</a> und <a href="https://github.com/git-artes/gr-tempest">gr-tempest</a> plugin</li>
<li><a href="https://airspy.com/download/">SDR#</a>, um die richtige Frequenz zu finden</li>
<li><a href="https://github.com/martinmarinov/TempestSDR">TempestSDR</a>, bzw.</li>
<li><a href="https://raw.github.com/martinmarinov/TempestSDR/master/Release/JavaGUI/JTempestSDR.jar">JTempestSDR</a> (vorkompiliert)</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>Für die Demo wird vor allem auf folgende Software zurückgegriffen, weil sie einfach zu bedienen ist und relativ zuverlässig funktioniert:</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
<li>vorkompilierte <a href="https://github.com/eried/Research/tree/master/HackRF/TempestSDR">Java Executable</a></li>
<li><a href="http://www.hdsdr.de/hardware.html">RTL-SDR Windows Treiber</a></li>
</ul>
<p><!-- /wp:list --></p>
<figure class="post__video"><iframe loading="lazy" width="696" height="390" style="width: 696px; height: 390px;" src="https://www.youtube.com/embed/QjqpKtGNbQo" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p><br><!-- /wp:shortcode --></p>
<p><!-- wp:heading --></p>
<h2>Vorgehen</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Zuerst muss eine Frequenz der abgestrahlten Störstrahlund des Monitors mit einem Spektrumanalysator (z.B. <a href="https://airspy.com/download/">SDR#</a> oder mit dem Programm <a href="https://gqrx.dk">gqrx</a>) gesucht werden. Dazu wird ein kontrastreiches Muster oder ein animiertes Bild auf dem Monitor angezeigt.</p>
<figure class="post__image"><img loading="lazy"  src="https://mkesenheimer.github.io/media/posts/31/tempest_animation.gif" alt="" width="1024" height="768"></figure>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":1232} --></p>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p>Die Störstrahlung des Bildschirms macht sich im Spektrum durch einen "Gartenzaun" bemerkbar, also durch eine Reihe von Spitzen, die nahe beieinander liegen.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Um das bestmögliche Ergebnis zu erhalten, wählt man die Frequenzspitze mit dem größten Signal-zu-Rausch-Verhältnis. Üblicherweise findet man eine brauchbare Frequenz im Bereich zwischen 100 und 400MHz.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Nachdem die Frequenz der Störstrahlung des Monitors festgestellt wurde, kann die Software JTempestSDR gestartet und der externe SDR-Dongle gewählt werden (ExtIO). Danach wird die Frequenz der Störstrahlung eingetragen und der Abhörvorgang gestartet. Mit ein bisschen Glück funktioniert der Automatikmodus und das Bild des Monitors wird sofort angezeigt. Andernfalls muss mit den Einstellungen so lange gespielt werden, bis ein brauchbares Bild angezeigt wird. Hilfreich sind hierfür die Diagramme im unteren Bereich der Anwendung (Frequenz und Autokorrelation). Die Autokorrelation gibt an, mit welchen Bildschirmeinstellungen (Wiederholrate und Auflösung) ein gutes Ergebnis zu erwarten ist. Durch Klicken auf einen Kanal der Autokorrelation werden die Bildschirmeinstellungen übernommen. Ggf. muss noch mal von Hand nachjustiert werden.</p>
<figure class="post__video"><iframe loading="lazy" width="697" height="391" style="width: 697px; height: 391px;" src="https://www.youtube.com/embed/8PHe1Qta4-Q" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":1266,"width":512,"height":404,"sizeSlug":"large"} --></p>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<figure class="post__image"><img loading="lazy"  src="https://mkesenheimer.github.io/media/posts/31/tempesttemplate.png" alt="" width="1123" height="885" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://mkesenheimer.github.io/media/posts/31/responsive/tempesttemplate-xs.png 640w ,https://mkesenheimer.github.io/media/posts/31/responsive/tempesttemplate-sm.png 768w ,https://mkesenheimer.github.io/media/posts/31/responsive/tempesttemplate-md.png 1024w ,https://mkesenheimer.github.io/media/posts/31/responsive/tempesttemplate-lg.png 1366w ,https://mkesenheimer.github.io/media/posts/31/responsive/tempesttemplate-xl.png 1600w ,https://mkesenheimer.github.io/media/posts/31/responsive/tempesttemplate-2xl.png 1920w"></figure>
<p><!-- /wp:paragraph --></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>220mm Racecopter Build</title>
        <author>
            <name>Matthias Kesenheimer</name>
        </author>
        <link href="https://mkesenheimer.github.io/220mm-racecopter-build.html"/>
        <id>https://mkesenheimer.github.io/220mm-racecopter-build.html</id>
        <media:content url="https://mkesenheimer.github.io/media/posts/30/img_2087.jpg" medium="image" />

        <updated>2020-08-15T10:08:49+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://mkesenheimer.github.io/media/posts/30/img_2087.jpg" alt="" />
                    <p style="text-align: justify;"><strong>A very light but nevertheless resistant Racecopter frame</strong></p>
<p>I wanted to have a very solid but lightweight and yet simple fpv race copter frame. This frame is incredible durable. This frame has even withstood several hard crashes so far. The frame may not be as light as a carbon frame, but the total weight of the quad is only 350g. With battery included 460g. That is truly not much for a durable and very fast racer. I would even say that compared to other builds, the quad is a flyweight.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://mkesenheimer.github.io/media/posts/30/img_2087.jpg" class="type:primaryImage" alt="" /></p>
                <p style="text-align: justify;"><strong>A very light but nevertheless resistant Racecopter frame</strong></p>
<p>I wanted to have a very solid but lightweight and yet simple fpv race copter frame. This frame is incredible durable. This frame has even withstood several hard crashes so far. The frame may not be as light as a carbon frame, but the total weight of the quad is only 350g. With battery included 460g. That is truly not much for a durable and very fast racer. I would even say that compared to other builds, the quad is a flyweight.</p>

<p>The initial inspiration for this frame came from Birdbone (<a href="https://pinshape.com/items/49556-3d-printed-birdbone-abs1-6dc-238mm-mini-quad-frame" rel="nofollow">https://pinshape.com/items/49556-3d-printed-birdbone-abs1-6dc-238mm-mini-quad-frame</a>). I completely reworked his design and freshly made the design in Fusion 360. I added more holes, made the frame a little bit smaller, added slots for the battery strap and zip ties. Design files are attached. That's what came out of it.</p>
<p>For the complete fpv race copter build the following parts are also needed:</p>
<ul>
<li>at least 4 brushless motors, for example Dys Samguk Wu 2206 2400kv</li>
<li>at least 4 electronic speed controllers, e.g. Turnigy MultiStar 30A BLHeli-S Rev16 V3 ESC 2~4S (Opto)</li>
<li>Omnibus F4 V3 flight controller</li>
<li>Velcro battery strap 300mm</li>
<li>Power distribution board, Matek PDB-XPW W/ Current Sensor 140A</li>
<li>CW and CCW props, e.g. 5050 three blade props</li>
<li>OrangeRx R616XN DSM2 / DSMX Compatible 6CH CPPM Nano Receiver</li>
<li>FT953 5.8GHz 400mW video transmitter and antennas</li>
<li>FPV camera</li>
<li>nylon bolts and nuts, nylon hex spacer 20mm</li>
</ul>
<p>This design was also published on <a href="https://www.thingiverse.com/thing:4570352" target="_blank" rel="noopener">thingiverse</a>. All the design files can be downloaded there.</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="3">
<figure class="gallery__item"><a href="https://mkesenheimer.github.io/media/posts/30/gallery/img_2096.jpg" data-size="6000x4000"><img loading="lazy" src="https://mkesenheimer.github.io/media/posts/30/gallery/img_2096-thumbnail.jpg" alt="" width="720" height="480"></a></figure>
<figure class="gallery__item"><a href="https://mkesenheimer.github.io/media/posts/30/gallery/img_2094.jpg" data-size="6000x4000"><img loading="lazy" src="https://mkesenheimer.github.io/media/posts/30/gallery/img_2094-thumbnail.jpg" alt="" width="720" height="480"></a></figure>
<figure class="gallery__item"><a href="https://mkesenheimer.github.io/media/posts/30/gallery/img_2093.jpg" data-size="6000x4000"><img loading="lazy" src="https://mkesenheimer.github.io/media/posts/30/gallery/img_2093-thumbnail.jpg" alt="" width="720" height="480"></a></figure>
<figure class="gallery__item"><a href="https://mkesenheimer.github.io/media/posts/30/gallery/img_2092.jpg" data-size="6000x4000"><img loading="lazy" src="https://mkesenheimer.github.io/media/posts/30/gallery/img_2092-thumbnail.jpg" alt="" width="720" height="480"></a></figure>
<figure class="gallery__item"><a href="https://mkesenheimer.github.io/media/posts/30/gallery/img_2091.jpg" data-size="6000x4000"><img loading="lazy" src="https://mkesenheimer.github.io/media/posts/30/gallery/img_2091-thumbnail.jpg" alt="" width="720" height="480"></a></figure>
<figure class="gallery__item"><a href="https://mkesenheimer.github.io/media/posts/30/gallery/img_2089.jpg" data-size="6000x4000"><img loading="lazy" src="https://mkesenheimer.github.io/media/posts/30/gallery/img_2089-thumbnail.jpg" alt="" width="720" height="480"></a></figure>
<figure class="gallery__item"><a href="https://mkesenheimer.github.io/media/posts/30/gallery/img_2088.jpg" data-size="6000x4000"><img loading="lazy" src="https://mkesenheimer.github.io/media/posts/30/gallery/img_2088-thumbnail.jpg" alt="" width="720" height="480"></a></figure>
<figure class="gallery__item"><a href="https://mkesenheimer.github.io/media/posts/30/gallery/img_2087.jpg" data-size="6000x4000"><img loading="lazy" src="https://mkesenheimer.github.io/media/posts/30/gallery/img_2087-thumbnail.jpg" alt="" width="720" height="480"></a></figure>
<figure class="gallery__item"><a href="https://mkesenheimer.github.io/media/posts/30/gallery/img_2086.jpg" data-size="6000x4000"><img loading="lazy" src="https://mkesenheimer.github.io/media/posts/30/gallery/img_2086-thumbnail.jpg" alt="" width="720" height="480"></a></figure>
</div></div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Reparatur einer kaputten Werkzeugkiste</title>
        <author>
            <name>Matthias Kesenheimer</name>
        </author>
        <link href="https://mkesenheimer.github.io/reparatur-einer-kaputten-werkzeugkiste.html"/>
        <id>https://mkesenheimer.github.io/reparatur-einer-kaputten-werkzeugkiste.html</id>
        <media:content url="https://mkesenheimer.github.io/media/posts/29/img_1674-2.jpg" medium="image" />

        <updated>2017-09-20T18:33:36+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://mkesenheimer.github.io/media/posts/29/img_1674-2.jpg" alt="" />
                    <p> </p>
<p>Meine kaputte Werkzeugkiste ärgerte mich schon seit längerer Zeit. Als ich einmal zu unachtsam mit ihr umging, brach ein Scharnier ab, weshalb sich die Kiste nicht mehr gut schließen ließ. Ein Ersatzteil aus dem 3D Drucker hat dann letztendlich die Werkzeugkiste wieder funktionsfähig gemacht.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://mkesenheimer.github.io/media/posts/29/img_1674-2.jpg" class="type:primaryImage" alt="" /></p>
                <p> </p>
<p>Meine kaputte Werkzeugkiste ärgerte mich schon seit längerer Zeit. Als ich einmal zu unachtsam mit ihr umging, brach ein Scharnier ab, weshalb sich die Kiste nicht mehr gut schließen ließ. Ein Ersatzteil aus dem 3D Drucker hat dann letztendlich die Werkzeugkiste wieder funktionsfähig gemacht.</p>

<figure class="post__image"><img loading="lazy"  src="https://mkesenheimer.github.io/media/posts/29/img_1672.jpg" alt="" width="3264" height="2448" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://mkesenheimer.github.io/media/posts/29/responsive/img_1672-xs.jpg 640w ,https://mkesenheimer.github.io/media/posts/29/responsive/img_1672-sm.jpg 768w ,https://mkesenheimer.github.io/media/posts/29/responsive/img_1672-md.jpg 1024w ,https://mkesenheimer.github.io/media/posts/29/responsive/img_1672-lg.jpg 1366w ,https://mkesenheimer.github.io/media/posts/29/responsive/img_1672-xl.jpg 1600w ,https://mkesenheimer.github.io/media/posts/29/responsive/img_1672-2xl.jpg 1920w"></figure>
<p>Das kaputte Teil oben im Bild zu sehen, wurde in Fusion 360 modelliert und anschließend ausgedruckt. Es passte auf Anhieb perfekt und erfüllt nun seinen Dienst hoffentlich besser als die originale Version. Das eingesetzte Ersatzteil ist auf dem letzten Bild zu erkennen. </p>
<figure class="post__image"><img loading="lazy"  src="https://mkesenheimer.github.io/media/posts/29/img_1674.jpg" alt="" width="3264" height="2448" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://mkesenheimer.github.io/media/posts/29/responsive/img_1674-xs.jpg 640w ,https://mkesenheimer.github.io/media/posts/29/responsive/img_1674-sm.jpg 768w ,https://mkesenheimer.github.io/media/posts/29/responsive/img_1674-md.jpg 1024w ,https://mkesenheimer.github.io/media/posts/29/responsive/img_1674-lg.jpg 1366w ,https://mkesenheimer.github.io/media/posts/29/responsive/img_1674-xl.jpg 1600w ,https://mkesenheimer.github.io/media/posts/29/responsive/img_1674-2xl.jpg 1920w"></figure>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Gardena Wasserhahn Adapter</title>
        <author>
            <name>Matthias Kesenheimer</name>
        </author>
        <link href="https://mkesenheimer.github.io/gardena-wasserhahn-adapter.html"/>
        <id>https://mkesenheimer.github.io/gardena-wasserhahn-adapter.html</id>
        <media:content url="https://mkesenheimer.github.io/media/posts/28/img_1500.jpg" medium="image" />

        <updated>2017-08-02T12:09:29+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://mkesenheimer.github.io/media/posts/28/img_1500.jpg" alt="" />
                    <p>Um einen Gardena Gartenschlauch in unserer Wohnung an einen gewöhnlichen Wasserhahn anschließen zu können, habe ich einen Adapter in AutoCAD entworfen und anschließend mit einem 3D Drucker gedruckt. Somit ist jetzt kein lästiges Gießkannenschleppen mehr nötig, um die Pflanzen auf dem Balkon zu gießen.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://mkesenheimer.github.io/media/posts/28/img_1500.jpg" class="type:primaryImage" alt="" /></p>
                <p>Um einen Gardena Gartenschlauch in unserer Wohnung an einen gewöhnlichen Wasserhahn anschließen zu können, habe ich einen Adapter in AutoCAD entworfen und anschließend mit einem 3D Drucker gedruckt. Somit ist jetzt kein lästiges Gießkannenschleppen mehr nötig, um die Pflanzen auf dem Balkon zu gießen.</p>

<figure class="post__image"><img loading="lazy"  src="https://mkesenheimer.github.io/media/posts/28/img_1500.jpg" alt="" width="3264" height="2448" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://mkesenheimer.github.io/media/posts/28/responsive/img_1500-xs.jpg 640w ,https://mkesenheimer.github.io/media/posts/28/responsive/img_1500-sm.jpg 768w ,https://mkesenheimer.github.io/media/posts/28/responsive/img_1500-md.jpg 1024w ,https://mkesenheimer.github.io/media/posts/28/responsive/img_1500-lg.jpg 1366w ,https://mkesenheimer.github.io/media/posts/28/responsive/img_1500-xl.jpg 1600w ,https://mkesenheimer.github.io/media/posts/28/responsive/img_1500-2xl.jpg 1920w"></figure>
<p>Die Gewinde waren am schwierigsten zu entwerfen, da es hier auf zehntel Millimeter ankommt. Kleinste Abweichungen entscheiden darüber, ob der Adapter passt und dicht ist, oder ob ein neuer Adapter gedruckt werden muss. Deshalb musste ich mehrere Versionen ausprobieren, bis die endgültige Version feststand. Das ist das tolle am 3D Druck: man kann immer wieder kleine Änderungen vornehmen und das 3D Modell so auf seine Richtigkeit überprüfen.</p>
<figure class="post__image"><img loading="lazy"  src="https://mkesenheimer.github.io/media/posts/28/img_1505.jpg" alt="" width="3264" height="2448" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://mkesenheimer.github.io/media/posts/28/responsive/img_1505-xs.jpg 640w ,https://mkesenheimer.github.io/media/posts/28/responsive/img_1505-sm.jpg 768w ,https://mkesenheimer.github.io/media/posts/28/responsive/img_1505-md.jpg 1024w ,https://mkesenheimer.github.io/media/posts/28/responsive/img_1505-lg.jpg 1366w ,https://mkesenheimer.github.io/media/posts/28/responsive/img_1505-xl.jpg 1600w ,https://mkesenheimer.github.io/media/posts/28/responsive/img_1505-2xl.jpg 1920w"></figure>
<p>Das Endprodukt mit Gardena Schraubanschluss:</p>
<figure class="post__image"><img loading="lazy"  src="https://mkesenheimer.github.io/media/posts/28/img_1506.jpg" alt="" width="3264" height="2448" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://mkesenheimer.github.io/media/posts/28/responsive/img_1506-xs.jpg 640w ,https://mkesenheimer.github.io/media/posts/28/responsive/img_1506-sm.jpg 768w ,https://mkesenheimer.github.io/media/posts/28/responsive/img_1506-md.jpg 1024w ,https://mkesenheimer.github.io/media/posts/28/responsive/img_1506-lg.jpg 1366w ,https://mkesenheimer.github.io/media/posts/28/responsive/img_1506-xl.jpg 1600w ,https://mkesenheimer.github.io/media/posts/28/responsive/img_1506-2xl.jpg 1920w"></figure>
<p>Die .stl-Datei gibt es auf <a href="https://www.myminifactory.com/object/gardena-adapter-41933">myminifactory</a>.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Die perfekte Wurfmaschine</title>
        <author>
            <name>Matthias Kesenheimer</name>
        </author>
        <link href="https://mkesenheimer.github.io/die-perfekte-wurfmaschine.html"/>
        <id>https://mkesenheimer.github.io/die-perfekte-wurfmaschine.html</id>
        <media:content url="https://mkesenheimer.github.io/media/posts/27/trebuchet_3d-2.jpg" medium="image" />

        <updated>2017-07-16T14:12:55+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://mkesenheimer.github.io/media/posts/27/trebuchet_3d-2.jpg" alt="" />
                    <p><strong>Die Planung eines perfekten mittelalterlichen Beschleunigers</strong></p>
<p>Mein Physik Studium hat mich einiges gelehrt - vor allem wie man tolle, große Beschleuniger baut. So verrückt es auch klingen mag, im dritten Semester lernt man dazu das mathematische Werkzeug wie man die perfekte mittelalterliche Wurfmaschine baut.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://mkesenheimer.github.io/media/posts/27/trebuchet_3d-2.jpg" class="type:primaryImage" alt="" /></p>
                <p><strong>Die Planung eines perfekten mittelalterlichen Beschleunigers</strong></p>
<p>Mein Physik Studium hat mich einiges gelehrt - vor allem wie man tolle, große Beschleuniger baut. So verrückt es auch klingen mag, im dritten Semester lernt man dazu das mathematische Werkzeug wie man die perfekte mittelalterliche Wurfmaschine baut.</p>

<p>Ein Trebuchet, von lat. trabatium, auch Blide oder Tribock genannt, ist eine altertümliche Belagerungsmaschine, die im vierten bis dritten Jahrhundert vor Christus erstmals in China als Zugblide auftrat. Bei einer Zugblide wird das Geschoss nicht mit einem am Hebel angebrachten Gegengewicht beschleunigt, sondern die nötige Kraft, um das Geschoss auf hohe Geschwindigkeiten zu bekommen, wird von Personen geliefert, die den kurzen Hebelarm an Seilen nach unten ziehen. Im sechsten Jahrhundert brachten Kreuzfahrer und Händler die Zugblide in den Mittelmeerraum.</p>
<p>Erst ab dem 12. Jahrhundert kamen verbesserte Maschinen mit pendelndem Gegengewicht in Westeuropa als Belagerungswaffen zum Einsatz und konnten sich sogar später einige Zeit lang gegen Schießpulver behaupten. Das Trebuchet mit Gegengewicht hatte den großen Vorteil, dass schwerere Geschosse mit gleichbleibender Kraft beschleunigt werden konnten, weshalb das Ergebnis präziser und nicht mehr von der variierenden Zugleistung der Personen abhing.</p>
<p>Originale Pläne oder Maßangaben von mittelalterlichen Wurfmaschinen sind leider verschollen, weshalb man heute die Maße von Trebuchets meist aus Gemälden rekonstruieren oder sich mit plausiblen Annahmen abfinden muss.</p>
<figure class="post__image"><img loading="lazy"  src="https://mkesenheimer.github.io/media/posts/27/trebuchet.jpg" alt="Trebuchet aus Konrad Kyesers Bellifortis-Handschrift Ms. Thott. 290.2º von 1459" width="1381" height="2000" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://mkesenheimer.github.io/media/posts/27/responsive/trebuchet-xs.jpg 640w ,https://mkesenheimer.github.io/media/posts/27/responsive/trebuchet-sm.jpg 768w ,https://mkesenheimer.github.io/media/posts/27/responsive/trebuchet-md.jpg 1024w ,https://mkesenheimer.github.io/media/posts/27/responsive/trebuchet-lg.jpg 1366w ,https://mkesenheimer.github.io/media/posts/27/responsive/trebuchet-xl.jpg 1600w ,https://mkesenheimer.github.io/media/posts/27/responsive/trebuchet-2xl.jpg 1920w"></figure>
<p>Um eine solche plausible Annahme soll es hier gehen. Es soll versucht werden mit einem einfachen physikalischen Modell Differentialgleichungen abzuleiten, die über ein Optimierungsverfahren auf die optimalen Maße eines Trebuchets führen. Vorweg: Das Modell funktioniert erstaunlich gut und liefert Verhältnisse von Maßen, die mit denen aus alten Abbildungen gut übereinstimmen. Das Modell soll später dazu dienen, ein optimales Trebuchet nach einer Bauweise aus dem 12. Jahrhundert zu rekonstruieren. Die reale Wurfweite des Nachbaus soll das Modell auf Richtigkeit überprüfen und klären, ob es sich tatsächlich um eine geeignete Konstruktion aus dem frühen Mittelalter handelt.</p>
<p>Alle Rechnungen wurden mit Mathematica durchgeführt. Wer sich selbst auf die Suche nach dem optimalen Trebuchet begeben möchte oder meine Maße dazu benutzen möchte, eine eigene Wurfmaschine nachzubauen, kann den Quellcode und die Maßangaben <a href="https://github.com/MKesenheimer/Trebuchet">hier</a> herunterladen. Doch bevor ich auf meine Konstruktion näher eingehe, möchte ich die Funktionsweise eines Trebuchets erklären.</p>
<p>Folgende Maße sind für die Simulation eines Trebuchets wichtig:</p>
<figure class="post__image"><img loading="lazy"  src="https://mkesenheimer.github.io/media/posts/27/winkel_und_abmessungen.jpg" alt="" width="968" height="577" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://mkesenheimer.github.io/media/posts/27/responsive/winkel_und_abmessungen-xs.jpg 640w ,https://mkesenheimer.github.io/media/posts/27/responsive/winkel_und_abmessungen-sm.jpg 768w ,https://mkesenheimer.github.io/media/posts/27/responsive/winkel_und_abmessungen-md.jpg 1024w ,https://mkesenheimer.github.io/media/posts/27/responsive/winkel_und_abmessungen-lg.jpg 1366w ,https://mkesenheimer.github.io/media/posts/27/responsive/winkel_und_abmessungen-xl.jpg 1600w ,https://mkesenheimer.github.io/media/posts/27/responsive/winkel_und_abmessungen-2xl.jpg 1920w"></figure>
<p>Der Winkel Phi wird zwischen Vertikale und der Aufhängung h des Gegengewichts M gemessen. L1 und L2 sind die jeweiligen Abmessungen des Wurfarms bis zum Drehpunkt. Zwischen der Horizontalen und dem Wurfarm befindet sich der Winkel Theta. Der Winkel Psi misst die Auslenkung zwischen der Horizontalen und der Wurfschlinge mit der Länge r. Das Geschoss hat die Masse m. Außerdem wird das Trägheitsmoment des Wurfarms mit I parametrisiert. Als erste Näherung kann hier das Trägheitsmoment einer langen Stange (1/12 µ (L1+L2)^2) verwendet werden, wobei µ die Masse des Wurfarms ist. In der Simulation wird ein Trägheitsmoment eines optimierten Wurfarms verwendet, d.h. der Wurfarm ist unten dick und läuft zum Ende hin spitz zu. So wird gewährleistet, dass die längere Strecke L2 weniger zum Trägheitsmoment beiträgt.</p>
<p><strong>Wurfabfolge:</strong></p>
<figure class="post__image"><img loading="lazy"  src="https://mkesenheimer.github.io/media/posts/27/schematic_1.jpg" alt="" width="1250" height="1250" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://mkesenheimer.github.io/media/posts/27/responsive/schematic_1-xs.jpg 640w ,https://mkesenheimer.github.io/media/posts/27/responsive/schematic_1-sm.jpg 768w ,https://mkesenheimer.github.io/media/posts/27/responsive/schematic_1-md.jpg 1024w ,https://mkesenheimer.github.io/media/posts/27/responsive/schematic_1-lg.jpg 1366w ,https://mkesenheimer.github.io/media/posts/27/responsive/schematic_1-xl.jpg 1600w ,https://mkesenheimer.github.io/media/posts/27/responsive/schematic_1-2xl.jpg 1920w"></figure>
<p>Im ersten Schritt befindet sich das Geschoss auf dem Boden und das Gegengewicht am höchsten Punkt. Die Geschwindigkeit des Geschosses und des Gegengewichts ist null, die ganze Energie der Anordnung ist in der potentiellen Energie des Gegengewichts gespeichert.</p>
<figure class="post__image"><img loading="lazy"  src="https://mkesenheimer.github.io/media/posts/27/schematic_14.jpg" alt="" width="1250" height="1250" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://mkesenheimer.github.io/media/posts/27/responsive/schematic_14-xs.jpg 640w ,https://mkesenheimer.github.io/media/posts/27/responsive/schematic_14-sm.jpg 768w ,https://mkesenheimer.github.io/media/posts/27/responsive/schematic_14-md.jpg 1024w ,https://mkesenheimer.github.io/media/posts/27/responsive/schematic_14-lg.jpg 1366w ,https://mkesenheimer.github.io/media/posts/27/responsive/schematic_14-xl.jpg 1600w ,https://mkesenheimer.github.io/media/posts/27/responsive/schematic_14-2xl.jpg 1920w"></figure>
<p>Nachdem das Gegengewicht losgelassen wird, fällt es aufgrund der Erdanziehung senkrecht nach unten. Der Wurfarm folgt der Bewegung des Gegengewichts und beschleunigt das Geschoss. Anfangs wird das Geschoss von der Schlinge auf dem Boden gezogen, bis es nach einer gewissen Zeit den Boden verlässt und sich auch in die vertikale Richtung bewegen kann. Es stellt sich heraus, dass das Ziehen des Geschosses auf dem Boden einen erheblichen Beitrag zur Wurfweite liefert. Der Boden verringert den Radius der Trajektorie am Anfang, weshalb das Geschoss einen kleineren Beitrag zum Trägheitsmoment erzeugt.</p>
<figure class="post__image"><img loading="lazy"  src="https://mkesenheimer.github.io/media/posts/27/schematic_25.jpg" alt="" width="1250" height="1250" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://mkesenheimer.github.io/media/posts/27/responsive/schematic_25-xs.jpg 640w ,https://mkesenheimer.github.io/media/posts/27/responsive/schematic_25-sm.jpg 768w ,https://mkesenheimer.github.io/media/posts/27/responsive/schematic_25-md.jpg 1024w ,https://mkesenheimer.github.io/media/posts/27/responsive/schematic_25-lg.jpg 1366w ,https://mkesenheimer.github.io/media/posts/27/responsive/schematic_25-xl.jpg 1600w ,https://mkesenheimer.github.io/media/posts/27/responsive/schematic_25-2xl.jpg 1920w"></figure>
<p>Abwurfphase: Das Gegengewicht hat nahezu seinen tiefsten Punkt und das Geschoss hat die höchste Geschwindigkeit erreicht. In dieser Phase tritt ein interessantes Phänomen auf, das sogenannte "Pumpen": Beim Pumpen erhöht sich die Geschossgeschwindigkeit durch die besondere Geometrie des Trebuchets schlagartig (siehe Diagramm zur Geschossgeschwindigkeit v(t)). Das ist auch der Grund warum ein Trebuchet als Wurfmaschine so effektiv ist. Die nachfolgende Animation verdeutlicht den Pumpeffekt.</p>
<p>Die folgende Animation wurde mit Mathematica für die plausiblen Abmessungen eines realen Trebuchets erstellt. Alle Unterlagen lassen sich <a href="https://github.com/MKesenheimer/Trebuchet">hier</a> herunterladen.</p>
<figure class="post__image"><img loading="lazy"  src="https://mkesenheimer.github.io/media/posts/27/animation.gif" alt="" width="645" height="691"></figure>
<p>Geschossgeschwindigkeit in Abhängigkeit der Zeit. Man sieht deutlich, dass sich die Geschwindigkeit vor dem Abwurf schlagartig erhöht (rote Linie). Die erste Spitze vor dem globalen Maximum ist dem Pumpeffekt des Trebuchets geschuldet.</p>
<figure class="post__image"><img loading="lazy"  src="https://mkesenheimer.github.io/media/posts/27/geschossgeschwindigkeit_t.jpg" alt="" width="750" height="520" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://mkesenheimer.github.io/media/posts/27/responsive/geschossgeschwindigkeit_t-xs.jpg 640w ,https://mkesenheimer.github.io/media/posts/27/responsive/geschossgeschwindigkeit_t-sm.jpg 768w ,https://mkesenheimer.github.io/media/posts/27/responsive/geschossgeschwindigkeit_t-md.jpg 1024w ,https://mkesenheimer.github.io/media/posts/27/responsive/geschossgeschwindigkeit_t-lg.jpg 1366w ,https://mkesenheimer.github.io/media/posts/27/responsive/geschossgeschwindigkeit_t-xl.jpg 1600w ,https://mkesenheimer.github.io/media/posts/27/responsive/geschossgeschwindigkeit_t-2xl.jpg 1920w"></figure>
<p>Mit dem verlinkten Mathematica Skript können durch ein Optimierungsverfahren alle relevanten Parameter, d.h. die optimale Länge der Aufhängung des Gegengewichts, die Wurfarm- und Schlingenlänge in Abhängigkeit der Massen berechnet werden. Dazu wird eine Lagrangefunktion aufgestellt, die den Zusammenhang aller physikalisch relevanten Größen beschreibt. Über die Euler-Lagrange-Gleichung werden die gekoppelten Differentialgleichungen von Theta, Psi und Phi berechnet, die anschließend mit Randbedingungen numerisch gelöst werden. Durch Variation der verschiedenen Parametern kann die Wurfweite berechnet werden. Die Wurfweite wird dann in Abhängigkeit aller Parameter maximiert.</p>
<p>Zusammenfassend hier die weniger interessanten Diagramme zur maximalen Wurfweite und zu den komplizierten Winkelfunktionen. Die maximale Wurfweite mit einem Gegengewicht von 50kg und einem Geschossgewicht von 0.5kg beträgt etwa 100m.</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="3">
<figure class="gallery__item"><a href="https://mkesenheimer.github.io/media/posts/27/gallery/geschossgeschwindigkeit_t.jpg" data-size="750x520"><img loading="lazy" src="https://mkesenheimer.github.io/media/posts/27/gallery/geschossgeschwindigkeit_t-thumbnail.jpg" alt="" width="720" height="499"></a></figure>
<figure class="gallery__item"><a href="https://mkesenheimer.github.io/media/posts/27/gallery/theta_t.jpg" data-size="750x518"><img loading="lazy" src="https://mkesenheimer.github.io/media/posts/27/gallery/theta_t-thumbnail.jpg" alt="" width="720" height="497"></a></figure>
<figure class="gallery__item"><a href="https://mkesenheimer.github.io/media/posts/27/gallery/wurfweite_t.jpg" data-size="750x495"><img loading="lazy" src="https://mkesenheimer.github.io/media/posts/27/gallery/wurfweite_t-thumbnail.jpg" alt="" width="720" height="475"></a></figure>
<figure class="gallery__item"><a href="https://mkesenheimer.github.io/media/posts/27/gallery/psi_t.jpg" data-size="750x520"><img loading="lazy" src="https://mkesenheimer.github.io/media/posts/27/gallery/psi_t-thumbnail.jpg" alt="" width="720" height="499"></a></figure>
</div></div>
<p>Mit den optimierten Parametern konnten daraufhin Zeichnungen in AutoCAD erstellt werden. Diese Zeichnungen sollen später dazu dienen das Trebuchet aus Holz nachzubauen und die Wurfweite mit den Rechnungen zu vergleichen.<a href="https://deralchemist.wordpress.com/wp-content/uploads/2017/07/trebuchet_3d2.pdf"></a></p>
<figure class="post__image"><img loading="lazy"  src="https://mkesenheimer.github.io/media/posts/27/trebuchet_3d.jpg" alt="" width="1650" height="1275" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://mkesenheimer.github.io/media/posts/27/responsive/trebuchet_3d-xs.jpg 640w ,https://mkesenheimer.github.io/media/posts/27/responsive/trebuchet_3d-sm.jpg 768w ,https://mkesenheimer.github.io/media/posts/27/responsive/trebuchet_3d-md.jpg 1024w ,https://mkesenheimer.github.io/media/posts/27/responsive/trebuchet_3d-lg.jpg 1366w ,https://mkesenheimer.github.io/media/posts/27/responsive/trebuchet_3d-xl.jpg 1600w ,https://mkesenheimer.github.io/media/posts/27/responsive/trebuchet_3d-2xl.jpg 1920w"></figure>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Mini-Oszilloskop</title>
        <author>
            <name>Matthias Kesenheimer</name>
        </author>
        <link href="https://mkesenheimer.github.io/mini-oszilloskop.html"/>
        <id>https://mkesenheimer.github.io/mini-oszilloskop.html</id>
        <media:content url="https://mkesenheimer.github.io/media/posts/26/cimg1979.jpg" medium="image" />

        <updated>2017-01-05T16:32:38+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://mkesenheimer.github.io/media/posts/26/cimg1979.jpg" alt="" />
                    <p><strong>Noch ein megaschnelles Oszilloskop</strong></p>
<p>Mit diesem kleinen Oszillisokop kann man sich langsame Signalverläufe zwischen 0 und 5V anschauen. Die Abtastrate ist wie <a href="https://deralchemist.wordpress.com/2014/07/07/das-megaschnelle-oszilloskop/">erwartet</a> nicht sehr groß (~3kSa/s), aber immerhin reicht die Rate aus, um Audiosignale wunderschön wiedergeben zu können.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://mkesenheimer.github.io/media/posts/26/cimg1979.jpg" class="type:primaryImage" alt="" /></p>
                <p><strong>Noch ein megaschnelles Oszilloskop</strong></p>
<p>Mit diesem kleinen Oszillisokop kann man sich langsame Signalverläufe zwischen 0 und 5V anschauen. Die Abtastrate ist wie <a href="https://deralchemist.wordpress.com/2014/07/07/das-megaschnelle-oszilloskop/">erwartet</a> nicht sehr groß (~3kSa/s), aber immerhin reicht die Rate aus, um Audiosignale wunderschön wiedergeben zu können.</p>

<p>Herzstück des Mini-Oszilloskops ist ein Arduino Nano V3 mit einem ATmega328P. Den Signalverlauf kann man sich auf einem kleinen LCD-Bildschirm (Nokia5110) anschauen. Ein Software-Trigger aus einem Ringpuffer erkennt steigende Flanken und sortiert den Anfang des Signals immer an die gleiche Stelle. Wahlweise kann auch eine kontinuierliche Signaldarstellung gewählt werden. Mit einem Poti lässt sich die Zeitachse einstellen, d.h. Signalverläufe mit gleicher Frequenz können gestreckt oder gestaucht werden (Zoomfunktion). Die Anpassung der y-Achse (Spannungsachse) geschieht automatisch, es wurde ein Auto Range implementiert.</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="3">
<figure class="gallery__item"><a href="https://mkesenheimer.github.io/media/posts/26/gallery/cimg1979.jpg" data-size="4320x3240"><img loading="lazy" src="https://mkesenheimer.github.io/media/posts/26/gallery/cimg1979-thumbnail.jpg" alt="" width="720" height="540"></a></figure>
<figure class="gallery__item"><a href="https://mkesenheimer.github.io/media/posts/26/gallery/cimg1973.jpg" data-size="4320x3240"><img loading="lazy" src="https://mkesenheimer.github.io/media/posts/26/gallery/cimg1973-thumbnail.jpg" alt="" width="720" height="540"></a></figure>
</div></div>
<p>Den Schaltplan gibt es dieses Mal als Breadboard-Version, erstellt mit der <a href="http://fritzing.org">Fritzing</a>-Software. Alle Unterlagen zu diesem Projekt sind wie immer auf meiner <a href="https://github.com/MKesenheimer/Mini_Oszi">Github</a>-Seite zu finden.</p>
<figure class="post__image"><img loading="lazy"  src="https://mkesenheimer.github.io/media/posts/26/mini_oszi_bb1.png" alt="" width="1755" height="1023" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://mkesenheimer.github.io/media/posts/26/responsive/mini_oszi_bb1-xs.png 640w ,https://mkesenheimer.github.io/media/posts/26/responsive/mini_oszi_bb1-sm.png 768w ,https://mkesenheimer.github.io/media/posts/26/responsive/mini_oszi_bb1-md.png 1024w ,https://mkesenheimer.github.io/media/posts/26/responsive/mini_oszi_bb1-lg.png 1366w ,https://mkesenheimer.github.io/media/posts/26/responsive/mini_oszi_bb1-xl.png 1600w ,https://mkesenheimer.github.io/media/posts/26/responsive/mini_oszi_bb1-2xl.png 1920w"></figure>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Quadruped</title>
        <author>
            <name>Matthias Kesenheimer</name>
        </author>
        <link href="https://mkesenheimer.github.io/quadruped.html"/>
        <id>https://mkesenheimer.github.io/quadruped.html</id>
        <media:content url="https://mkesenheimer.github.io/media/posts/25/cimg2521.jpg" medium="image" />

        <updated>2017-01-04T15:29:36+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://mkesenheimer.github.io/media/posts/25/cimg2521.jpg" alt="" />
                    <p><strong>Nach dem Nano-Quadrocopter ein Mini-Quadruped</strong></p>
<p>Vor einer Weile sah ich auf <a href="http://hackaday.com/2015/05/07/the-simplest-quadrupedal-robot-ever/">Hackaday</a> einen winzigen und vom Prinzip her recht einfachen vierbeinigen Roboter, den ich unbedingt nachbauen wollte. Vierbeinige Roboter sind deshalb sehr einfach, weil sie keinen Gleichgewichtssinn wie zweibeinige Roboter brauchen. Dieser vierbeinige Roboter ist dazu noch sehr einfach aufgebaut. Es werden keine komplizierten Bauteile aus Plastik oder Metall benötigt, die Beine des Roboters sind aus handelsüblichen Servos aufgebaut.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://mkesenheimer.github.io/media/posts/25/cimg2521.jpg" class="type:primaryImage" alt="" /></p>
                <p><strong>Nach dem Nano-Quadrocopter ein Mini-Quadruped</strong></p>
<p>Vor einer Weile sah ich auf <a href="http://hackaday.com/2015/05/07/the-simplest-quadrupedal-robot-ever/">Hackaday</a> einen winzigen und vom Prinzip her recht einfachen vierbeinigen Roboter, den ich unbedingt nachbauen wollte. Vierbeinige Roboter sind deshalb sehr einfach, weil sie keinen Gleichgewichtssinn wie zweibeinige Roboter brauchen. Dieser vierbeinige Roboter ist dazu noch sehr einfach aufgebaut. Es werden keine komplizierten Bauteile aus Plastik oder Metall benötigt, die Beine des Roboters sind aus handelsüblichen Servos aufgebaut.</p>

<p>Wenn sich Vierfüßler fortbewegen, berühren mindestens immer drei Füße den Boden. Mit vier Beinen und drei Freiheitsgraden pro Bein, ist trotzdem ein komplexer Bewegungsablauf nötig, damit sich der Schwerpunkt innerhalb des von den drei Füßen aufgespannten Dreiecks befindet.</p>
<p style="text-align:center;">[youtube https://www.youtube.com/watch?v=WiLgsCNI0jU]</p>
<p>
Zum Glück musste ich mir diesmal nicht viel Neues ausdenken. Bis auf Kleinigkeiten konnte ich einen Großteil des Arduino-Programms ohne Probleme von <a href="http://tote.readthedocs.io/en/latest/intro.html">Deshipu</a> übernehmen. Mit seiner sehr guten Dokumentation ist der Aufbau und die Programmierung des Vierfüßlers  kein Problem. Allerdings sieht das Layout der Schaltung bei mir ein bisschen anders aus. So habe ich die Belegung der Pins für die Servos anders gewählt, um keinen Kabelsalat zu erzeugen. Außerdem habe ich einen Bluetooth-Empfänger und einen Ultraschallsensor hinzugefügt. Somit wird der Roboter autonom, und drahtlos steuern kann man ihn geschickt vom Computer aus.</p>
<p>[gallery ids="1075,1076" type="rectangular"]</p>
<p>Allein bei der Steuerung habe ich Änderungen vorgenommen. Der IR-Empfänger wird bei meiner Version nicht verwendet. Stattdessen kann man den Roboter ganz geschickt über ein einfaches Python-Skript vom Computer aus ansteuern.</p>
<p>Vielleicht lässt sich dieser Roboter mit meinem <a href="https://deralchemist.wordpress.com/2016/06/13/sammlung-kleiner-projekte/">Neuronalen-Netz</a> verknüpfen, damit er intelligent Hindernissen ausweicht? Der Ultraschallsensor ist dazu schon vorhanden. Alle Unterlagen meiner Version des Roboters sind auf meiner <a href="https://github.com/MKesenheimer/QP_MK1">Github-Seite</a> zu finden.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Theraband-Beschleuniger</title>
        <author>
            <name>Matthias Kesenheimer</name>
        </author>
        <link href="https://mkesenheimer.github.io/theraband-beschleuniger.html"/>
        <id>https://mkesenheimer.github.io/theraband-beschleuniger.html</id>
        <media:content url="https://mkesenheimer.github.io/media/posts/24/img_0586.jpg" medium="image" />

        <updated>2017-01-02T14:11:00+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://mkesenheimer.github.io/media/posts/24/img_0586.jpg" alt="" />
                    <p><strong>Ein weiteres Gymnastikband-Projekt</strong></p>
<p>Ein kleineres Tagesprojekt aus Holz, das für sehr viel Spaß sorgt - wenn man vorsichtig damit umgeht und keine Scheibe einschießt. Diese Steinschleuder ist kein Spielzeug.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://mkesenheimer.github.io/media/posts/24/img_0586.jpg" class="type:primaryImage" alt="" /></p>
                <p><strong>Ein weiteres Gymnastikband-Projekt</strong></p>
<p>Ein kleineres Tagesprojekt aus Holz, das für sehr viel Spaß sorgt - wenn man vorsichtig damit umgeht und keine Scheibe einschießt. Diese Steinschleuder ist kein Spielzeug.</p>

<p>Steinschleudern haben mich schon immer fasziniert. Vor allem die aus schön geschliffenem Holz und mit ordentlicher Spannkraft. Diese Steinschleuder besteht aus verleimtem Buchenholz. Die grobe Form wurde mit einer Bandsäge herausgearbeitet und mit Feile und Schleifpapier mühevoll verfeinert. Das Gummi ist ein dreilagiges Thera-Latexband (hier schwarz, das goldene wäre besser gewesen), zugeschnitten auf 22 x 2cm. Die Munition besteht aus gewöhnlichen Glasmurmeln, die von einem Lederstreifen mit Loch gehalten wird. Auf die volle Länge von 1,5m gespannt, durchschlagen die Glasmurmeln problemlos 3mm dickes MDF-Holz.</p>
<p>[gallery ids="970,971" type="rectangular"]</p>
<p>Wer diese Steinschleuder nachbaut, muss sich im Klaren sein, dass dies kein Spielzeug ist. Unvorsichtig verwendet, kann diese Zwille zu ernsthaften Verletzungen führen.</p>

            ]]>
        </content>
    </entry>
</feed>
